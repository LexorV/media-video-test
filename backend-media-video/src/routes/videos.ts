import express, { Request, Response, NextFunction } from 'express';
import { uploadMiddleware, handleMulterError } from '../middleware/uploadMiddleware.js';
import { validateVideoFile } from '../middleware/fileValidationMiddleware.js';
import videoService from '../services/VideoService.js';
import userService from '../services/UserService.js';
import videoConversionService from '../services/VideoConversionService.js';
import videoQueue, { getQueueStats, getJobInfo } from '../queues/videoConversionQueue.js';
import path from 'path';
import fs from 'fs';

const router = express.Router();

/**
 * POST /videos/upload
 * –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
 */
router.post(
  '/upload',
  uploadMiddleware.single('video'),
  handleMulterError,
  validateVideoFile,
  async (req: Request, res: Response, next: NextFunction) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
      if (!req.file) {
        return res.status(400).json({
          message: '–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ body (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞)
      const { userId, name } = req.body;

      if (!userId) {
        // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if (fs.existsSync(req.file.path)) {
          fs.unlinkSync(req.file.path);
        }
        return res.status(400).json({
          message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
        });
      }

      const videoName = name || req.file.originalname;
      const ext = path.extname(req.file.originalname).toLowerCase().replace('.', '');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
      const needsConversion = videoConversionService.requiresConversion(
        req.file.mimetype,
        ext
      );

      let finalFilename = req.file.filename;
      let finalMimeType = req.file.mimetype;
      let duration: number | undefined;
      let conversionStatus: 'pending' | 'processing' | 'completed' | 'failed' | 'none' = 'none';

      if (needsConversion) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Å —Å—Ç–∞—Ç—É—Å–æ–º pending
        conversionStatus = 'pending';
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –≤–∏–¥–µ–æ –≤ –ë–î
      const video = await videoService.createVideo({
        userId,
        name: videoName,
        filename: finalFilename,
        originalName: req.file.originalname,
        originalFormat: ext,
        mimeType: finalMimeType,
        size: req.file.size,
        duration,
        isConverted: false,
        conversionStatus
      });

      // –î–æ–±–∞–≤–ª—è–µ–º ID –≤–∏–¥–µ–æ –≤ –º–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await userService.addVideoToUser(userId, String(video._id));

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Bull Queue
      if (needsConversion) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const queueStats = await getQueueStats();
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å
          const job = await videoQueue.add(
            {
              videoId: String(video._id),
              inputPath: req.file.path,
              userId: userId
            },
            {
              priority: 1, // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–º–µ–Ω—å—à–µ = –≤—ã—à–µ)
              timeout: 7200000 // 2 —á–∞—Å–∞ –º–∞–∫—Å–∏–º—É–º –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            }
          );
          
          console.log(`üìã [Upload] –í–∏–¥–µ–æ ${video._id} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (Job ID: ${job.id})`);
          console.log(`üìä [Upload] –¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å: ${queueStats.active} –∞–∫—Ç–∏–≤–Ω—ã—Ö, ${queueStats.waiting} –æ–∂–∏–¥–∞—é—â–∏—Ö`);
        } catch (error) {
          console.error(`‚ùå [Upload] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å:`, error);
          // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ failed
          await videoService.updateVideo(String(video._id), {
            conversionStatus: 'failed'
          });
        }
      }

      return res.status(201).json({
        message: needsConversion 
          ? '–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é' 
          : '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ',
        video: {
          id: video._id,
          name: video.name,
          originalName: video.originalName,
          size: video.size,
          mimeType: video.mimeType,
          conversionStatus: video.conversionStatus,
          createdAt: video.createdAt
        }
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ:', error);
      
      // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      if (req.file && fs.existsSync(req.file.path)) {
        try {
          fs.unlinkSync(req.file.path);
        } catch (unlinkError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', unlinkError);
        }
      }
      
      return next(error);
    }
  }
);

/**
 * GET /videos
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
router.get('/', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { userId, limit, offset } = req.query;

    if (!userId) {
      return res.status(400).json({
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const videos = await videoService.getVideosByUserId(
      userId as string,
      {
        limit: limit ? parseInt(limit as string) : undefined,
        offset: offset ? parseInt(offset as string) : undefined
      }
    );

    const count = await videoService.getVideoCount(userId as string);

    return res.json({
      videos: videos.map(v => ({
        id: v._id,
        name: v.name,
        originalName: v.originalName,
        size: v.size,
        mimeType: v.mimeType,
        duration: v.duration,
        isConverted: v.isConverted,
        conversionStatus: v.conversionStatus,
        createdAt: v.createdAt
      })),
      total: count
    });
  } catch (error) {
    return next(error);
  }
});

/**
 * GET /videos/:id
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ
 */
router.get('/:id', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { userId } = req.query;

    if (!userId) {
      return res.status(400).json({
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    const video = await videoService.getVideoById(id);

    if (!video) {
      return res.status(404).json({
        message: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const isOwner = await videoService.validateOwnership(id, userId as string);
    if (!isOwner) {
      return res.status(403).json({
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –≤–∏–¥–µ–æ'
      });
    }

    return res.json({
      id: video._id,
      name: video.name,
      originalName: video.originalName,
      originalFormat: video.originalFormat,
      size: video.size,
      mimeType: video.mimeType,
      duration: video.duration,
      isConverted: video.isConverted,
      conversionStatus: video.conversionStatus,
      createdAt: video.createdAt
    });
  } catch (error: any) {
    if (error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID')) {
      return res.status(400).json({ message: error.message });
    }
    return next(error);
  }
});

/**
 * GET /videos/:id/stream
 * –°—Ç—Ä–∏–º–∏–Ω–≥ –≤–∏–¥–µ–æ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Range requests
 */
router.get('/:id/stream', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { userId } = req.query;

    if (!userId) {
      return res.status(400).json({
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
    const video = await videoService.getVideoById(id);

    if (!video) {
      return res.status(404).json({
        message: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    const isOwner = await videoService.validateOwnership(id, userId as string);
    if (!isOwner) {
      return res.status(403).json({
        message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –≤–∏–¥–µ–æ'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    if (video.conversionStatus === 'processing' || video.conversionStatus === 'pending') {
      return res.status(202).json({
        message: '–í–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        conversionStatus: video.conversionStatus
      });
    }

    if (video.conversionStatus === 'failed') {
      return res.status(500).json({
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    const filePath = videoService.getVideoFilePath(video.filename);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if (!fs.existsSync(filePath)) {
      return res.status(404).json({
        message: '–í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stat = fs.statSync(filePath);
    const fileSize = stat.size;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ Range requests –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    const range = req.headers.range;

    if (range) {
      // –ü–∞—Ä—Å–∏–º range header
      const parts = range.replace(/bytes=/, '').split('-');
      const start = parseInt(parts[0], 10);
      const end = parts[1] ? parseInt(parts[1], 10) : fileSize - 1;
      
      const chunkSize = (end - start) + 1;
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞
      const fileStream = fs.createReadStream(filePath, { start, end });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      res.writeHead(206, {
        'Content-Range': `bytes ${start}-${end}/${fileSize}`,
        'Accept-Ranges': 'bytes',
        'Content-Length': chunkSize,
        'Content-Type': video.mimeType
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ç–æ–∫
      fileStream.pipe(res);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Ñ–∞–π–ª
      res.writeHead(200, {
        'Content-Length': fileSize,
        'Content-Type': video.mimeType,
        'Accept-Ranges': 'bytes'
      });
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
      const fileStream = fs.createReadStream(filePath);
      fileStream.pipe(res);
    }
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ –≤–∏–¥–µ–æ:', error);
    if (error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID')) {
      return res.status(400).json({ message: error.message });
    }
    return next(error);
  }
});

/**
 * DELETE /videos/:id
 * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
 */
router.delete('/:id', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { id } = req.params;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({
        message: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }

    // –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤–Ω—É—Ç—Ä–∏)
    const deleted = await videoService.deleteVideo(id, userId);

    if (!deleted) {
      return res.status(404).json({
        message: '–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ'
      });
    }

    // –£–¥–∞–ª—è–µ–º ID –≤–∏–¥–µ–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await userService.removeVideoFromUser(userId, id);

    return res.status(204).send();
  } catch (error: any) {
    if (error.message.includes('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID')) {
      return res.status(400).json({ message: error.message });
    }
    return next(error);
  }
});

/**
 * GET /videos/queue/stats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
router.get('/queue/stats', async (_req: Request, res: Response, next: NextFunction) => {
  try {
    const stats = await getQueueStats();
    
    return res.json({
      queue: stats,
      info: {
        maxConcurrent: 2,
        description: '–ú–∞–∫—Å–∏–º—É–º 2 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ'
      }
    });
  } catch (error) {
    return next(error);
  }
});

/**
 * GET /videos/queue/job/:jobId
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
router.get('/queue/job/:jobId', async (req: Request, res: Response, next: NextFunction) => {
  try {
    const { jobId } = req.params;
    
    const jobInfo = await getJobInfo(jobId);
    
    if (!jobInfo) {
      return res.status(404).json({
        message: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    return res.json(jobInfo);
  } catch (error) {
    return next(error);
  }
});

export default router;

