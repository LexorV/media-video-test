import Queue from 'bull';
import videoConversionService from '../services/VideoConversionService.js';
import videoService from '../services/VideoService.js';
import path from 'path';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
interface VideoConversionJob {
  videoId: string;
  inputPath: string;
  userId: string;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
const redisConfig = {
  host: process.env.REDIS_HOST || 'localhost',
  port: parseInt(process.env.REDIS_PORT || '6379'),
  maxRetriesPerRequest: null, // –î–ª—è Bull —ç—Ç–æ –≤–∞–∂–Ω–æ
  enableReadyCheck: false,
  retryStrategy: (times: number) => {
    const delay = Math.min(times * 1000, 10000);
    console.log(`üîÑ [Redis] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${times}, –∑–∞–¥–µ—Ä–∂–∫–∞ ${delay}ms`);
    return delay;
  },
};

console.log(`üîå [Redis] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –Ω–∞ ${redisConfig.host}:${redisConfig.port}`);

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis
 * Bull Queue –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
 * - –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á (–Ω–µ —Ç–µ—Ä—è—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 * - –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
 * - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—é
 */
export const videoQueue = new Queue<VideoConversionJob>('video-conversion', {
  redis: redisConfig,
  defaultJobOptions: {
    attempts: 3,           // –ü–æ–≤—Ç–æ—Ä–∏—Ç—å 3 —Ä–∞–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    backoff: {
      type: 'exponential',
      delay: 60000,        // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 1 –º–∏–Ω—É—Ç–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    },
    removeOnComplete: 100, // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    removeOnFail: 200,     // –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    timeout: 7200000,      // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 2 —á–∞—Å–∞
  },
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Redis –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
 */
export async function checkRedisConnection(): Promise<boolean> {
  try {
    const client = await videoQueue.client;
    await client.ping();
    console.log('‚úÖ [Redis] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå [Redis] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    return false;
  }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export async function initializeQueue(): Promise<void> {
  try {
    const isConnected = await checkRedisConnection();
    if (!isConnected) {
      console.warn('‚ö†Ô∏è [Redis] –†–∞–±–æ—Ç–∞ –±–µ–∑ Redis - –æ—á–µ—Ä–µ–¥—å –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–π');
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    const stats = await getQueueStats();
    console.log('üìä [Queue] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', stats);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–±—É–µ–º –∏—Ö –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
    if (stats.active > 0) {
      console.log('üîÑ [Queue] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, –ø—Ä–æ–≤–µ—Ä—è—é –∏—Ö —Å—Ç–∞—Ç—É—Å...');
    }
  } catch (error) {
    console.error('‚ùå [Queue] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏:', error);
    throw error;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏
 * –ü–∞—Ä–∞–º–µ—Ç—Ä 2 = –º–∞–∫—Å–∏–º—É–º 2 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 * –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 4-8
 */
videoQueue.process(2, async (job) => {
  const { videoId, inputPath } = job.data;
  
  console.log(`üé¨ [Queue] –ù–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ ${videoId} (–ø–æ–ø—ã—Ç–∫–∞ ${job.attemptsMade + 1}/${job.opts.attempts})`);
  console.log(`üìä [Queue] –ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: ${await videoQueue.getWaitingCount()} –æ–∂–∏–¥–∞—é—â–∏—Ö`);
  
  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    await videoService.updateVideo(videoId, {
      conversionStatus: 'processing'
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const result = await videoConversionService.convertToMP4(
      inputPath,
      (progress) => {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ Bull (–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ Bull Board)
        job.progress(progress);
        console.log(`üìä [Queue] –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ${videoId}: ${progress}%`);
      }
    );
    
    if (result.success && result.outputPath) {
      // –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
      videoConversionService.deleteFile(inputPath);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      const convertedFilename = path.basename(result.outputPath);
      await videoService.updateVideo(videoId, {
        filename: convertedFilename,
        mimeType: 'video/mp4',
        isConverted: true,
        conversionStatus: 'completed',
        duration: result.duration
      });
      
      console.log(`‚úÖ [Queue] –í–∏–¥–µ–æ ${videoId} —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ`);
      
      return { 
        success: true, 
        videoId,
        convertedFilename,
        duration: result.duration
      };
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    }
  } catch (error: any) {
    console.error(`‚ùå [Queue] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ ${videoId}:`, error.message);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
    if (job.attemptsMade >= (job.opts.attempts || 3) - 1) {
      console.error(`üíÄ [Queue] –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è ${videoId}`);
      await videoService.updateVideo(videoId, {
        conversionStatus: 'failed'
      });
    } else {
      console.warn(`‚ö†Ô∏è [Queue] –ü–æ–ø—ã—Ç–∫–∞ ${job.attemptsMade + 1} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${60000 * Math.pow(2, job.attemptsMade)}ms`);
    }
    
    throw error; // Bull –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  }
});

// ============================================================================
// –°–æ–±—ã—Ç–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
// ============================================================================

videoQueue.on('completed', (job, result) => {
  console.log(`‚úÖ [Queue] –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:`, result);
});

videoQueue.on('failed', (job, err) => {
  console.error(`‚ùå [Queue] –ó–∞–¥–∞—á–∞ ${job?.id} –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫:`, err.message);
});

videoQueue.on('stalled', (job) => {
  console.warn(`‚ö†Ô∏è [Queue] –ó–∞–¥–∞—á–∞ ${job.id} –∑–∞–≤–∏—Å–ª–∞ (stalled), Bull –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç...`);
});

videoQueue.on('active', (job) => {
  console.log(`‚ñ∂Ô∏è [Queue] –ó–∞–¥–∞—á–∞ ${job.id} –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–≤–∏–¥–µ–æ: ${job.data.videoId})`);
});

videoQueue.on('waiting', (jobId) => {
  console.log(`‚è≥ [Queue] –ó–∞–¥–∞—á–∞ ${jobId} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –æ–∂–∏–¥–∞–Ω–∏—è`);
});

videoQueue.on('progress', (_job, _progress) => {
  // –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ WebSocket –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  // io.to(_job.data.userId).emit('conversion-progress', { videoId: _job.data.videoId, progress: _progress });
});

videoQueue.on('error', (error) => {
  console.error('üö® [Queue] –û—à–∏–±–∫–∞ Bull Queue:', error);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Redis
videoQueue.on('global:resumed', () => {
  console.log('‚ñ∂Ô∏è [Queue] –û—á–µ—Ä–µ–¥—å –≥–ª–æ–±–∞–ª—å–Ω–æ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
});

videoQueue.on('global:paused', () => {
  console.log('‚è∏Ô∏è [Queue] –û—á–µ—Ä–µ–¥—å –≥–ª–æ–±–∞–ª—å–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
const redisClient = videoQueue.client;
redisClient.on('connect', () => {
  console.log('üîå [Redis] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É Redis');
});

redisClient.on('ready', () => {
  console.log('‚úÖ [Redis] –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
});

redisClient.on('error', (error) => {
  console.error('‚ùå [Redis] –û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error.message);
});

redisClient.on('close', () => {
  console.warn('‚ö†Ô∏è [Redis] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
});

redisClient.on('reconnecting', () => {
  console.log('üîÑ [Redis] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
});

redisClient.on('end', () => {
  console.warn('üîå [Redis] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
});

// ============================================================================
// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—á–µ—Ä–µ–¥—å—é
// ============================================================================

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
 */
export async function getQueueStats() {
  const [waiting, active, completed, failed, delayed] = await Promise.all([
    videoQueue.getWaitingCount(),
    videoQueue.getActiveCount(),
    videoQueue.getCompletedCount(),
    videoQueue.getFailedCount(),
    videoQueue.getDelayedCount(),
  ]);

  return {
    waiting,
    active,
    completed,
    failed,
    delayed,
    total: waiting + active + delayed
  };
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ
 */
export async function getJobInfo(jobId: string) {
  const job = await videoQueue.getJob(jobId);
  if (!job) return null;

  return {
    id: job.id,
    data: job.data,
    progress: job.progress(),
    state: await job.getState(),
    attemptsMade: job.attemptsMade,
    failedReason: job.failedReason,
    finishedOn: job.finishedOn,
    processedOn: job.processedOn,
  };
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
 */
export async function cleanQueue() {
  await videoQueue.clean(24 * 60 * 60 * 1000); // –°—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
  console.log('üßπ [Queue] –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á');
}

/**
 * –ü–∞—É–∑–∞ –æ—á–µ—Ä–µ–¥–∏
 */
export async function pauseQueue() {
  await videoQueue.pause();
  console.log('‚è∏Ô∏è [Queue] –û—á–µ—Ä–µ–¥—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É');
}

/**
 * –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
 */
export async function resumeQueue() {
  await videoQueue.resume();
  console.log('‚ñ∂Ô∏è [Queue] –û—á–µ—Ä–µ–¥—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

/**
 * Graceful shutdown
 */
export async function closeQueue() {
  await videoQueue.close();
  console.log('üîå [Queue] –û—á–µ—Ä–µ–¥—å –∑–∞–∫—Ä—ã—Ç–∞');
}

export default videoQueue;

